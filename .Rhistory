runApp()
runApp()
source("R/module_data_sources.R")
runApp()
modules <- c("overview", "restaurants", "attractions", "events", "accommodation", "transport", "data_sources")
sapply(modules, function(m) file.create(paste0("R/module_", m, ".R")))
runApp()
modules <- c("overview", "restaurants", "attractions", "events", "accommodation", "transport", "data_sources")
sapply(modules, function(m) {
filename <- paste0("R/module_", m, ".R")
if (!file.exists(filename)) {
file.create(filename)
cat(paste0(m, "UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    # UI elements will go here\n  )\n}\n\n",
m, "Server <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    # Server logic will go here\n  })\n}\n"),
file = filename)
}
})
modules <- c("overview", "restaurants", "attractions", "events", "accommodation", "transport", "data_sources")
sapply(modules, function(m) {
filename <- paste0("R/module_", m, ".R")
if (!file.exists(filename)) {
file.create(filename)
cat(paste0(m, "UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    # UI elements will go here\n  )\n}\n\n",
m, "Server <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    # Server logic will go here\n  })\n}\n"),
file = filename)
}
})
runApp()
runApp()
library(shiny)
library(httr)
library(jsonlite)
library(DT)
library(ggplot2)
# API 设置
api_key <- "a168ac4157dd988ca05ae9b99640bd48"
base_url_forecast <- "http://api.openweathermap.org/data/2.5/forecast"
# 获取5天/3小时预报数据的函数
get_forecast_info <- function() {
url <- paste0(base_url_forecast,
"?lat=-37.8136&lon=144.9631&appid=", api_key, "&units=metric")
response <- httr::GET(url)
forecast_data <- httr::content(response, "parsed", encoding = "UTF-8")
return(forecast_data)
}
# 解析 API 返回的数据为数据框格式
process_forecast_data <- function(forecast_data) {
forecast_list <- forecast_data$list
df <- data.frame(
Time = sapply(forecast_list, function(x) {
as.POSIXct(x$dt, origin = "1970-01-01", tz = "Australia/Melbourne")
}),
Temperature = sapply(forecast_list, function(x) x$main$temp),
Feels_Like = sapply(forecast_list, function(x) x$main$feels_like),
Weather = sapply(forecast_list, function(x) x$weather[[1]]$description),
Wind_Speed = sapply(forecast_list, function(x) x$wind$speed),
Visibility = sapply(forecast_list, function(x) x$visibility),
stringsAsFactors = FALSE
)
df$Time <- as.POSIXct(df$Time, origin = "1970-01-01", tz = "Australia/Melbourne")
df$Date <- as.Date(df$Time)
return(df)
}
process_forecast_data_lineChart <- function(forecast_data) {
forecast_list <- forecast_data$list
df <- data.frame(
Time = sapply(forecast_list, function(x) {
as.POSIXct(x$dt, origin = "1970-01-01", tz = "Australia/Melbourne")
}),
Temperature = sapply(forecast_list, function(x) x$main$temp),
stringsAsFactors = FALSE
)
df$Time <- as.POSIXct(df$Time, origin = "1970-01-01", tz = "Australia/Melbourne")
return(df)
}
# UI 函数
weatherUI <- function(id) {
ns <- NS(id)
tagList(
tags$style(HTML("
body {
background-color: #001f3f;
color: white;
}
.weather-box {
background-color: #e0f7fa;
padding: 15px;
margin-top: 10px;
border-radius: 10px;
box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}
.weather-info {
font-size: 16px;
color: black;
}
.weather-icon {
width: 100px;
height: 100px;
margin-left: 15px;
}
table {
width: 100%;
border-collapse: collapse;
margin-top: 20px;
}
th, td {
padding: 10px;
text-align: center;
border: 1px solid white;
}
th {
background-color: #0074D9;
color: white;
}
td {
background-color: #e0f7fa;
color: black;
}
.dataTables_wrapper .dataTables_info,
.dataTables_wrapper .dataTables_paginate,
.dataTables_wrapper .dataTables_length label,
.dataTables_wrapper .dataTables_filter label {
color: white;
}
.dataTables_wrapper .dataTables_paginate .paginate_button,
.dataTables_wrapper .dataTables_filter input {
color: white;
background-color: #001f3f;
border: 1px solid #0074D9;
}
.dataTables_length select {
background-color: black;
color: white;
}
.dataTables_length select option {
background-color: black;
color: white;
}
")),
mainPanel(
uiOutput(ns("current_weather")),
fluidRow(
h3("未来5天每3小时天气预报"),
DTOutput(ns("forecast_table"))
),
fluidRow(
h3("温度变化折线图"),
plotOutput(ns("temperature_plot"))
)
)
)
}
# 服务器函数
weatherServer <- function(id) {
moduleServer(id, function(input, output, session) {
forecast_data <- reactive({
get_forecast_info()
})
forecast_df <- reactive({
process_forecast_data(forecast_data())
})
forecast_df_lineChart <- reactive({
process_forecast_data_lineChart(forecast_data())
})
output$current_weather <- renderUI({
current_data <- forecast_data()$list[[1]]
weather_type <- current_data$weather[[1]]$main
temperature <- current_data$main$temp
feels_like <- current_data$main$feels_like
wind_speed <- current_data$wind$speed
visibility <- current_data$visibility
icon_path <- switch(weather_type,
"Rain" = "rainy.png",
"Clear" = "clear.png",
"Clouds" = "cloudy.png",
"error.png")
tags$div(class = "weather-box",
tags$div(class = "weather-info",
tags$h3("墨尔本当前天气"),
tags$p(paste("天气类型:", weather_type)),
tags$p(paste("温度:", round(temperature, 1), "°C")),
tags$p(paste("体感温度:", round(feels_like, 1), "°C")),
tags$p(paste("风速:", wind_speed, "m/s")),
tags$p(paste("能见度:", visibility, "米"))
),
tags$img(src = icon_path, class = "weather-icon")
)
})
output$forecast_table <- renderDT({
datatable(forecast_df(),
options = list(
pageLength = 10,
order = list(list(1, 'asc')),
columnDefs = list(list(visible = FALSE, targets = 6)),
rowGroup = list(dataSrc = 6),
searching = FALSE,
info = FALSE
),
rownames = FALSE
)
})
output$temperature_plot <- renderPlot({
ggplot(forecast_df_lineChart(), aes(x = Time, y = Temperature)) +
geom_line(color = "#0074D9", size = 1.5) +
labs(x = "日期时间", y = "温度 (°C)") +
theme_minimal() +
scale_x_datetime(date_breaks = "1 day", date_labels = "%Y-%m-%d %H:%M") +
theme(
panel.background = element_rect(fill = "#e0f7fa", color = NA),
plot.background = element_rect(fill = "#001f3f", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(color = "white", size = 16, face = "bold"),
axis.title.x = element_text(color = "white", size = 12),
axis.title.y = element_text(color = "white", size = 12),
axis.text = element_text(color = "white")
)
})
})
}
runApp()
runApp()
runApp()
setwd("~/Google Drive/My Drive/Personal_Knowledge_Vault/03_Unimelb/24_S2/Information Visualisation/Assigment/a3/melbourne-tourism-explorer")
runApp()
getwd()
runApp()
runApp()
runApp()
runApp('~/Library/CloudStorage/GoogleDrive-liyatang0000@gmail.com/My Drive/Personal_Knowledge_Vault/03_Unimelb/24_S2/Information Visualisation/Assigment/a3/tab2.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Library/CloudStorage/GoogleDrive-liyatang0000@gmail.com/My Drive/Personal_Knowledge_Vault/03_Unimelb/24_S2/Information Visualisation/Assigment/a3/tab2.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(leaflet)
library(dplyr)
library(plotly)
library(DT)
library(httr)
library(jsonlite)
library(ggplot2)
library(shiny)
library(httr)
library(jsonlite)
library(DT)
library(ggplot2)
library(readr)
library(shinyWidgets)
library(leaflet.extras)
library(shinyjs)
library(tidyr)
library(RColorBrewer)
# 源代码文件
# source("R/module_overview.R")
source("R/module_restaurants.R")
source("R/module_attractions.R")
# source("R/module_events.R")
source("R/module_accommodation.R")
source("R/module_transport.R")
source("R/module_weather.R")
# source("R/module_data_sources.R")
# 全局函数定义
# ... (如有需要，可以在这里定义全局函数)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
setwd("~/Library/CloudStorage/GoogleDrive-liyatang0000@gmail.com/My Drive/Personal_Knowledge_Vault/03_Unimelb/24_S2/Information Visualisation/Assigment/a3/melbourne-tourism-explorer")
runApp()
runApp()
install.packages(c("magrittr", "dplyr", "tidyr", "ggplot2", "DT", "shinydashboard", "leaflet"))
install.packages(c("magrittr", "dplyr", "tidyr", "ggplot2", "DT", "shinydashboard", "leaflet"))
shiny::runApp()
setwd("~/Library/CloudStorage/GoogleDrive-liyatang0000@gmail.com/My Drive/Personal_Knowledge_Vault/03_Unimelb/24_S2/Information Visualisation/Assigment/a3/melbourne-tourism-explorer")
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(leaflet)
library(dplyr)
library(plotly)
library(DT)
library(httr)
library(jsonlite)
library(ggplot2)
library(shiny)
library(httr)
library(jsonlite)
library(DT)
library(ggplot2)
library(readr)
library(shinyWidgets)
library(leaflet.extras)
library(shinyjs)
library(tidyr)
library(RColorBrewer)
library(magrittr)
# Source code file
source("R/module_overview.R")
source("R/module_restaurants.R")
source("R/module_attractions.R")
source("R/module_accommodation.R")
source("R/module_transport.R")
source("R/module_weather.R")
source("R/module_data_sources.R")
runApp()
setwd("~/Library/CloudStorage/GoogleDrive-liyatang0000@gmail.com/My Drive/Personal_Knowledge_Vault/03_Unimelb/24_S2/Information Visualisation/Assigment/a3/melbourne-tourism-explorer")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
getwd()
getwd()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
data %>%
rename(
number_of_seats = `Number of seats`,
longitude = Longitude,
latitude = Latitude
) %>%
select(
`Business address`,
`CLUE small area`,
`Trading name`,
`Industry (ANZSIC4) description`,
`Seating type`,
number_of_seats,
longitude,
latitude,
location
)
runApp()
runApp()
runApp()
shiny::runApp()
